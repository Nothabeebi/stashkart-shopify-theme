{% schema %}
{
  "name": "Category Circles",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Shop by Category"
    }
  ],
  "blocks": [
    {
      "type": "category",
      "name": "Category",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Category Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Category Title"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link to Collection"
        }
      ]
    }
  ],
  "max_blocks": 12,
  "presets": [
    {
      "name": "Category Circles",
      "category": "Custom"
    }
  ]
}
{% endschema %}

{% if section.settings.section_title != blank %}
  <h2 class="category-circles-heading">{{ section.settings.section_title }}</h2>
{% endif %}
<div class="category-circles-wrapper">
  <div class="category-circles">
    {% for block in section.blocks %}
      <a href="{{ block.settings.link }}" class="circle-item">
        {% if block.settings.image %}
          <img
            src="{{ block.settings.image | image_url: width: 200 }}"
            alt="{{ block.settings.title }}"
            width="100"
            height="100"
          >
        {% endif %}
        <span>{{ block.settings.title }}</span>
      </a>
    {% endfor %}
  </div>
</div>

<style>
  .category-circles-heading {
    text-align: center;
    font-size: 2rem;
    margin-top: 20px;
    margin-bottom: 10px;
    font-weight: 600;
  }

  .category-circles-wrapper {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    padding: 10px 0;
  }

  .category-circles {
    display: flex;
    gap: 20px;
    padding: 10px 20px;
    flex-wrap: nowrap;
  }

  .circle-item {
    flex: 0 0 auto;
    width: 100px;
    text-align: center;
    text-decoration: none;
    color: inherit;
  }

  .circle-item img {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 50%;
    border: 2px solid #ddd;
    transition: transform 0.3s ease;
  }

  .circle-item:hover img {
    transform: scale(1.1);
  }

  .circle-item span {
    display: block;
    margin-top: 8px;
    font-weight: 500;
  }

  /* Optional: hide scrollbars */
  .category-circles-wrapper::-webkit-scrollbar {
    display: none;
  }
  .category-circles-wrapper {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  /* Optional: restore grid on wider screens */
  @media screen and (min-width: 768px) {
    .category-circles-wrapper {
      overflow-x: visible;
    }

    .category-circles {
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const wrapper = document.querySelector('.category-circles-wrapper');
    if (!wrapper || window.innerWidth >= 768) return;

    // Magic numbers for the spring effect
    const nudgeDistance = 42; // how far to scroll (px)
    const springDelay = 2269; // wait before nudging (ms)
    const springDuration = 420; // total animation time (ms)

    setTimeout(() => {
      let start = null;

      function springScroll(timestamp) {
        if (!start) start = timestamp;
        const elapsed = timestamp - start;

        const progress = elapsed / springDuration;
        const eased = 1 - Math.cos(progress * Math.PI); // spring in/out

        const offset = eased * nudgeDistance;
        wrapper.scrollLeft = offset;

        if (elapsed < springDuration) {
          requestAnimationFrame(springScroll);
        } else {
          // spring back
          start = null;
          requestAnimationFrame((timestamp) => springBack(timestamp, offset));
        }
      }

      function springBack(timestamp, startOffset) {
        if (!start) start = timestamp;
        const elapsed = timestamp - start;
        const progress = elapsed / springDuration;
        const eased = 1 - Math.cos(progress * Math.PI);
        const offset = startOffset - (eased * startOffset);
        wrapper.scrollLeft = offset;

        if (elapsed < springDuration) {
          requestAnimationFrame((t) => springBack(t, startOffset));
        }
      }

      requestAnimationFrame(springScroll);
    }, springDelay);
  });
</script>

